
# Arch: x86_64
FROM centos:7

SHELL ["/bin/bash", "-c"]

ARG BUILD=x86_64-unknown-linux-gnu
ARG TARGET=x86_64-w64-mingw32
ARG INSTALLROOT=/usr/local
ARG SRC=/opt/_src
ARG BUILDROOT=/opt/_build

ARG MINGW=$INSTALLROOT/mingw32
ARG PREFIX=$MINGW

ARG CFLAGS=
ARG CXXFLAGS=
ARG LDFLAGS=

ENV PATH $PREFIX/bin:$PATH

ARG GCC_VER=10.3.0
ARG BINUTILS_VER=2.38
ARG MPFR_VER=4.1.0
ARG GMP_VER=6.2.1
ARG MPC_VER=1.2.1
ARG ISL_VER=0.24

ARG MINGW_VER=10.0.0
ARG PTHREADS4W_VER=3.0.0

# Red Hat Developer Toolset
ARG RH_DTS_VER=10
ARG RH_DTS_GCC_VER=10.2.1-11.2

# Clang and LLVM Toolset
ARG RH_LTS_VER=7.0
# override the old `cmake` in the LLVM Toolset
ARG CMAKE_VER=3.23.2

ARG RH_RUBY_VER=26
ARG RUBY_INSTALL_VER=0.8.3
ARG CHRUBY_VER=0.3.9

# non-root, nopasswd sudoer in *wheel* group
ARG NONROOT_USER=centos
ARG NONROOT_UID=1000
ARG NONROOT_GRP=$NONROOT_USER
ARG NONROOT_GID=$NONROOT_UID


RUN sed -i 's/^tsflags=nodocs$/# tsflags=nodocs/' /etc/yum.conf \
    && yum -y reinstall "*" \
\
    && yum install -y centos-release-scl epel-release && yum makecache && yum update -y \
    && yum install -y devtoolset-${RH_DTS_VER}-gcc-c++-${RH_DTS_GCC_VER}.el7 devtoolset-${RH_DTS_VER}-make bison flex gperf patch autoconf automake \
        libtool gettext-devel bzip2 unzip file texinfo glibc-devel glibc-devel.i686 llvm-toolset-${RH_LTS_VER}-cmake rh-ruby${RH_RUBY_VER} python3 sudo wget man man-pages \
        glibc-static.i686 glibc-static.x86_64 \
\
        openssl-devel python-sphinx ncurses-devel \
\
    && yum localinstall -y https://yum.oracle.com/repo/OracleLinux/OL7/SoftwareCollections/x86_64/getPackage/devtoolset-${RH_DTS_VER}-libstdc++-devel-${RH_DTS_GCC_VER}.el7.i686.rpm \
    && yum clean all \
\
    && echo -e "source scl_source enable devtoolset-${RH_DTS_VER}\nsource scl_source enable llvm-toolset-${RH_LTS_VER}\nsource scl_source enable rh-ruby${RH_RUBY_VER}\nunset BASH_ENV PROMPT_COMMAND ENV" > /usr/bin/scl_enable_centos7 \
    && echo -e "PATH=$MINGW/bin:\$PATH\nPATH=\$(echo -n \$PATH | awk -v RS=: -v FS=: '!(\$1 in a) {a[\$1]; if (length(a) > 1) printf \":\"; printf \$1}')\nexport PATH=\$PATH"  >> /usr/bin/scl_enable_centos7 \
    && chmod +x /usr/bin/scl_enable_centos7 && source /usr/bin/scl_enable_centos7 \
    && gem install rake && pip3 install --no-cache-dir -U pip && pip install --no-cache-dir meson virtualenv \
\
\
    && mkdir -p $SRC $BUILDROOT $MINGW && cd $SRC \
    && curl -L -O https://ftp.gnu.org/gnu/gcc/gcc-$GCC_VER/gcc-$GCC_VER.tar.xz \
    && curl -L -O https://ftp.gnu.org/gnu/binutils/binutils-$BINUTILS_VER.tar.xz \
    && curl -L -O https://ftp.gnu.org/gnu/mpfr/mpfr-$MPFR_VER.tar.xz \
    && curl -L -O https://ftp.gnu.org/gnu/gmp/gmp-$GMP_VER.tar.xz \
    && curl -L -O https://ftp.gnu.org/gnu/mpc/mpc-$MPC_VER.tar.gz \
    && curl -L -O https://distfiles.macports.org/isl/isl-$ISL_VER.tar.bz2 \
    && curl -L -o mingw-w64-$MINGW_VER.tar.gz https://github.com/mirror/mingw-w64/archive/v$MINGW_VER.tar.gz \
    && curl -L -O https://sourceforge.net/projects/pthreads4w/files/pthreads4w-code-v$PTHREADS4W_VER.zip \
    && curl -L -o mingw-std-threads-master.zip https://github.com/meganz/mingw-std-threads/archive/master.zip \
    && curl -L -O https://github.com/Kitware/CMake/releases/download/v$CMAKE_VER/cmake-$CMAKE_VER.tar.gz \
    && curl -L -o ruby-install-$RUBY_INSTALL_VER.tar.gz https://github.com/postmodern/ruby-install/archive/v$RUBY_INSTALL_VER.tar.gz \
    && curl -L -o chruby-$CHRUBY_VER.tar.gz https://github.com/postmodern/chruby/archive/v$CHRUBY_VER.tar.gz \
\
    && tar Jxvf gcc-$GCC_VER.tar.xz \
    && tar Jxvf binutils-$BINUTILS_VER.tar.xz \
    && tar Jxvf mpfr-$MPFR_VER.tar.xz \
    && tar Jxvf gmp-$GMP_VER.tar.xz \
    && tar zxvf mpc-$MPC_VER.tar.gz \
    && tar jxvf isl-$ISL_VER.tar.bz2 \
    && tar zxvf mingw-w64-$MINGW_VER.tar.gz \
    && mkdir pthreads4w && unzip -d pthreads4w pthreads4w-code-v$PTHREADS4W_VER.zip && mv pthreads4w/pthreads4w-code*/* pthreads4w/ \
    && unzip mingw-std-threads-master.zip \
    && tar zxvf cmake-$CMAKE_VER.tar.gz \
    && tar zxvf ruby-install-$RUBY_INSTALL_VER.tar.gz \
    && tar zxvf chruby-$CHRUBY_VER.tar.gz \
\
    && mv mpfr-$MPFR_VER gcc-$GCC_VER/mpfr \
    && mv gmp-$GMP_VER gcc-$GCC_VER/gmp \
    && mv mpc-$MPC_VER gcc-$GCC_VER/mpc \
    && mv isl-$ISL_VER gcc-$GCC_VER/isl \
\
    && mkdir -p $BUILDROOT/binutils \
    && cd $BUILDROOT/binutils \
    && $SRC/binutils-$BINUTILS_VER/configure --prefix=$PREFIX --with-sysroot=$PREFIX \
        --target=$TARGET --enable-targets=x86_64-w64-mingw32,i686-w64-mingw32 --build=$BUILD \
    && make -j $(( $(nproc) + 3 )) && make install \
\
    && mkdir -p $BUILDROOT/headers \
    && cd $BUILDROOT/headers \
    && $SRC/mingw-w64-$MINGW_VER/mingw-w64-headers/configure --prefix=$PREFIX/$TARGET --host=$TARGET --build=$BUILD \
    && make install \
\
    && ln -s $PREFIX/$TARGET $PREFIX/mingw \
    && mkdir -p $PREFIX/$TARGET/lib && mkdir -p $PREFIX/$TARGET/lib32 \
    && ln -s $PREFIX/$TARGET/lib $PREFIX/$TARGET/lib64 \
\
    && mkdir -p $BUILDROOT/gcc \
    && cd $BUILDROOT/gcc \
    && $SRC/gcc-$GCC_VER/configure --build=$BUILD --target=$TARGET \
        --enable-targets=x86_64-w64-mingw32,i686-w64-mingw32 --prefix=$PREFIX --with-sysroot=$PREFIX \
        --enable-languages=c,c++ --enable-multiarch --enable-multilib --with-multilib-list=m32,m64 --enable-64bit \
        --enable-threads=win32 --enable-shared --enable-fully-dynamic-string \
        --enable-lto --disable-libstdcxx-pch --enable-libgomp \
    && make all-gcc -j $(( $(nproc) + 3 )) && make install-gcc \
\
    && mkdir -p $BUILDROOT/mingw \
    && cd $BUILDROOT/mingw \
    && $SRC/mingw-w64-$MINGW_VER/mingw-w64-crt/configure --prefix=$PREFIX/$TARGET --with-sysroot=$PREFIX --host=$TARGET \
        --enable-lib32=yes --enable-lib64=yes \
    && make -j $(( $(nproc) + 3 )) && make install \
\
    && cd $BUILDROOT/gcc \
    && make all-target-libgcc -j $(( $(nproc) + 3 )) && make install-target-libgcc \
\
    && cd $SRC/pthreads4w && autoheader && autoconf \
    && mkdir -p $BUILDROOT/pthreads4w \
    && cd $BUILDROOT/pthreads4w \
    && CC=x86_64-w64-mingw32-gcc CXX=x86_64-w64-mingw32-g++ AR=x86_64-w64-mingw32-ar OBJDUMP=x86_64-w64-mingw32-objdump \
        RANLIB=x86_64-w64-mingw32-ranlib RC="x86_64-w64-mingw32-windres -F pe-i386" DLLTOOL="x86_64-w64-mingw32-dlltool -m i386" \
        $SRC/pthreads4w/configure --host=i686-w64-mingw32 \
    && make realclean GC ARCH="-m32" \
    && cp -f libpthreadGC3.dll.a pthreadGC3.dll $PREFIX/$TARGET/lib32 \
    && mv $PREFIX/$TARGET/lib32/libpthreadGC3.dll.a $PREFIX/$TARGET/lib32/libpthread.dll.a \
    && mv $PREFIX/$TARGET/lib32/pthreadGC3.dll $PREFIX/$TARGET/lib32/pthread.dll \
    && make realclean GC-static ARCH="-m32" \
    && cp -f libpthreadGC3.a $PREFIX/$TARGET/lib32 \
    && mv $PREFIX/$TARGET/lib32/libpthreadGC3.a $PREFIX/$TARGET/lib32/libpthread.a \
    && CC=x86_64-w64-mingw32-gcc CXX=x86_64-w64-mingw32-g++ AR=x86_64-w64-mingw32-ar OBJDUMP=x86_64-w64-mingw32-objdump \
        RANLIB=x86_64-w64-mingw32-ranlib RC="x86_64-w64-mingw32-windres -F pe-x86-64" DLLTOOL="x86_64-w64-mingw32-dlltool -m i386:x86-64" \
        $SRC/pthreads4w/configure --host=x86_64-w64-mingw32 \
    && make realclean GC ARCH="-m64" \
    && cp -f libpthreadGC3.dll.a pthreadGC3.dll $PREFIX/$TARGET/lib \
    && mv $PREFIX/$TARGET/lib/libpthreadGC3.dll.a $PREFIX/$TARGET/lib/libpthread.dll.a \
    && mv $PREFIX/$TARGET/lib/pthreadGC3.dll $PREFIX/$TARGET/lib/pthread.dll \
    && make realclean GC-static ARCH="-m64" \
    && cp -f libpthreadGC3.a $PREFIX/$TARGET/lib \
    && mv $PREFIX/$TARGET/lib/libpthreadGC3.a $PREFIX/$TARGET/lib/libpthread.a \
    && cp -f $SRC/pthreads4w/pthread.h $SRC/pthreads4w/sched.h $SRC/pthreads4w/semaphore.h $SRC/pthreads4w/_ptw32.h $PREFIX/$TARGET/include \
\
    && cd $BUILDROOT/gcc \
    && make -j $(( $(nproc) + 3 )) && make install \
\
    && /bin/bash -c \
    '\
    cp -f $SRC/mingw-std-threads-master/*.h $MINGW/$TARGET/include/c++/$GCC_VER/;\
    std_headers=("condition_variable" "future" "mutex" "shared_mutex" "thread");\
    for std_header in "${std_headers[@]}"; do\
        full_std_header="$MINGW/$TARGET/include/c++/$GCC_VER/${std_header}";\
        sed -i "s/include  *<\(condition_variable\|future\|mutex\|shared_mutex\|thread\)>/include <\1.h>/g" "${full_std_header}";\
        mv "${full_std_header}" "${full_std_header}.h";\
        mv "$MINGW/$TARGET/include/c++/$GCC_VER/mingw.${std_header}.h" "${full_std_header}";\
        sed -i "s/include  *<\(condition_variable\|future\|mutex\|shared_mutex\|thread\)>/include <\1.h>/g" "${full_std_header}";\
        sed -i "s/include  *\"mingw\.\(condition_variable\|future\|mutex\|shared_mutex\|thread\)\.h\"/include \"\1\"/g" "${full_std_header}";\
    done\
    '\
\
    && mkdir -p $BUILDROOT/cmake && cd $BUILDROOT/cmake \
    && $SRC/cmake-$CMAKE_VER/bootstrap --prefix=/opt/rh/llvm-toolset-$RH_LTS_VER/root/usr --mandir=share/man --sphinx-man -- -DBUILD_CursesDialog=True \
    && make && make install \
\
    && cd $SRC/ruby-install-$RUBY_INSTALL_VER && make PREFIX=/usr/local DESTDIR= install \
    && cd $SRC/chruby-$CHRUBY_VER && make PREFIX=/usr/local install \
    && echo -e "source /usr/local/share/chruby/chruby.sh\n# source /usr/local/share/chruby/auto.sh" > /etc/profile.d/chruby.sh \
\
    && cd / && rm -rf $SRC $BUILDROOT \
    && strip -s $MINGW/bin/$TARGET-* && strip -s $MINGW/$TARGET/lib/*.dll && strip -s $MINGW/$TARGET/lib32/*.dll \
    && cd $MINGW/libexec/gcc/$TARGET/$GCC_VER && strip -s cc1 cc1plus collect2 lto-wrapper lto1 \
\
    && cd $MINGW/lib/gcc/$TARGET/$GCC_VER && $TARGET-gcc -dumpspecs > specs \
    && sed -i '/\*cpp:/!b; n; s%\(.*\)%\1 -I/opt/mingw32/x86_64-w64-mingw32/include -I/opt/mingw32/i686-w64-mingw32/include -I/opt/mingw32/include%' specs \
    && sed -i '/\*cc1plus:/!b; n; s%\(.*\)%\1 -I/opt/mingw32/x86_64-w64-mingw32/include -I/opt/mingw32/i686-w64-mingw32/include -I/opt/mingw32/include%' specs \
    && sed -i '/\*link_libgcc:/!b; n; s%\(.*\)%\1 -L/opt/mingw32/x86_64-w64-mingw32/lib -L/opt/mingw32/i686-w64-mingw32/lib -L/opt/mingw32/lib%' specs \
\
    && echo -e ". /usr/bin/scl_enable_centos7" >> /etc/profile.d/enable_mingw_scl.sh \
    && sed -i 's%^exec .*"\$cmd_options"$%if [ "\$cmd_options" == "" ]; then\n    exec /usr/bin/sudo \$sudo_options\nelse\n    exec /usr/bin/sudo \$sudo_options \
env PATH="\$PATH" LD_LIBRARY_PATH="\$LD_LIBRARY_PATH" scl enable devtoolset-'${RH_DTS_VER}' llvm-toolset-'${RH_LTS_VER}' rh-ruby'${RH_RUBY_VER}' "\$cmd_options"\nfi%' \
/opt/rh/devtoolset-${RH_DTS_VER}/root/usr/bin/sudo \
    && sed -i '/^%wheel/!b; s/^/# /; n; n; n; s/^# //' /etc/sudoers \
    && groupadd -g ${NONROOT_GID} ${NONROOT_GRP} && useradd -u ${NONROOT_UID} -g ${NONROOT_GRP} -G wheel -m ${NONROOT_USER} \
    && echo -e "[user]\ndefault=${NONROOT_USER}" >> /etc/wsl.conf

ENV BASH_ENV="/usr/bin/scl_enable_centos7" ENV="/usr/bin/scl_enable_centos7" PROMPT_COMMAND=". /usr/bin/scl_enable_centos7"